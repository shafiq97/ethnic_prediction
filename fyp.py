# -*- coding: utf-8 -*-
"""FYP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aM13q33h6hP21B5fovDcTJTeqwEZzwg3

# IMPORTING LIBRARIES

Models, Plotting, Visualization
"""
#!/usr/bin/env python

import pandas as pd
import numpy as np
import joblib
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, mean_absolute_error,r2_score
import matplotlib.pyplot as plt

"""# DATA PRE-PROCESSING

Importing Dataset
"""

# Load the dataset
excel_file = 'fetal_growth_chart.xlsx'
dfs = pd.read_excel(excel_file, sheet_name=None)
combined_data = pd.concat(dfs.values(), ignore_index=True)

# Filter data for each race
indian_data = combined_data[combined_data['RACE'] == 'I']
chinese_data = combined_data[combined_data['RACE'] == 'C']
malay_data = combined_data[combined_data['RACE'] == 'M']

#from google.colab import drive
#drive.mount('/content/drive')

"""Data Cleaning"""

# Define the feature columns
feature_cols = ['BPD', 'HC', 'AC', 'FL']

# Function to preprocess the data
def preprocess_data(data):
    X = data[feature_cols].copy()
    y = data['EFW'].apply(str).str.replace(',', '').astype(float).copy()
   # print(list(data))

    # Convert 'GA' column to numeric values
    X['GA'] = data['GA'].str.extract(r'(\d+\.?\d*)').astype(float)

    imputer = SimpleImputer(strategy='mean')
    X = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)
    y = pd.Series(imputer.fit_transform(y.values.reshape(-1, 1)).flatten())

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    return X_train, X_test, y_train, y_test

# Preprocess the data for each race
X_train_indian, X_test_indian, y_train_indian, y_test_indian = preprocess_data(indian_data)
X_train_chinese, X_test_chinese, y_train_chinese, y_test_chinese = preprocess_data(chinese_data)
X_train_malay, X_test_malay, y_train_malay, y_test_malay = preprocess_data(malay_data)

# Define the feature columns
feature_cols = ['BPD', 'HC', 'AC', 'FL']

# Function to preprocess the data
def preprocess_data(data):
    X = data[feature_cols].copy()
    y = data['EFW'].apply(str).str.replace(',', '').astype(float).copy()
   # print(list(data))

    # Convert 'GA' column to numeric values
    X['GA'] = data['GA'].str.extract(r'(\d+\.?\d*)').astype(float)

    imputer = SimpleImputer(strategy='mean')
    X = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)
    y = pd.Series(imputer.fit_transform(y.values.reshape(-1, 1)).flatten())

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    return X_train, X_test, y_train, y_test

# Preprocess the data for each race
X_train_indian, X_test_indian, y_train_indian, y_test_indian = preprocess_data(indian_data)
X_train_chinese, X_test_chinese, y_train_chinese, y_test_chinese = preprocess_data(chinese_data)
X_train_malay, X_test_malay, y_train_malay, y_test_malay = preprocess_data(malay_data)

"""# Random Forest Model

Malay Race
"""

# Train the Random Forest model for Malay race
rf_model_malay = RandomForestRegressor(n_estimators=100, max_depth=20, random_state=42)
rf_model_malay.fit(X_train_malay, y_train_malay)
rf_predictions_malay = rf_model_malay.predict(X_test_malay)

# Calculate evaluation metrics for the Random Forest model (Malay race)
rf_mse_malay = mean_squared_error(y_test_malay, rf_predictions_malay)
rf_mae_malay = mean_absolute_error(y_test_malay, rf_predictions_malay)
rf_r2_malay = r2_score(y_test_malay, rf_predictions_malay)
rf_mre_malay = np.mean(np.abs((y_test_malay - rf_predictions_malay) / y_test_malay)) * 100

print(f"Random Forest Model - Malay Race")
print(f"Mean Squared Error (MSE): {round(rf_mse_malay, 2)}")
print(f"Mean Absolute Error (MAE): {round(rf_mae_malay, 2)}")
print(f"R-squared: {round(rf_r2_malay, 3)}")
print(f"Mean Relative Error (MRE): {round(rf_mre_malay, 2)}%")

"""Indian Race"""

# Train the Random Forest model for Indian race
rf_model_indian = RandomForestRegressor(n_estimators=100, max_depth=20, random_state=42)
rf_model_indian.fit(X_train_indian, y_train_indian)
rf_predictions_indian = rf_model_indian.predict(X_test_indian)

# Calculate evaluation metrics for Indian race
rf_mse_indian = mean_squared_error(y_test_indian, rf_predictions_indian)
rf_mae_indian = mean_absolute_error(y_test_indian, rf_predictions_indian)
rf_r2_indian = r2_score(y_test_indian, rf_predictions_indian)
rf_mre_indian = np.mean(np.abs((y_test_indian - rf_predictions_indian) / y_test_indian)) * 100

print(f"Random Forest Model - Indian Race")
print(f"Mean Squared Error (MSE): {round(rf_mse_indian, 2)}")
print(f"Mean Absolute Error (MAE): {round(rf_mae_indian, 2)}")
print(f"R-squared: {round(rf_r2_malay, 3)}")
print(f"Mean Relative Error (MRE): {round(rf_mre_indian, 2)}%")

"""Chinese Race"""

# Train the Random Forest model for Chinese race
rf_model_chinese = RandomForestRegressor(n_estimators=100, max_depth=20, random_state=42)
rf_model_chinese.fit(X_train_chinese, y_train_chinese)
rf_predictions_chinese = rf_model_chinese.predict(X_test_chinese)

# Calculate evaluation metrics for Chinese race
rf_mse_chinese = mean_squared_error(y_test_chinese, rf_predictions_chinese)
rf_mae_chinese = mean_absolute_error(y_test_chinese, rf_predictions_chinese)
rf_r2_chinese = r2_score(y_test_chinese, rf_predictions_chinese)
rf_mre_chinese = np.mean(np.abs((y_test_chinese - rf_predictions_chinese) / y_test_chinese)) * 100


print(f"Random Forest Model - Chinese Race")
print(f"Mean Squared Error (MSE): {round(rf_mse_chinese, 2)}")
print(f"Mean Absolute Error (MAE): {round(rf_mae_chinese, 2)}")
print(f"R-squared: {round(rf_r2_chinese, 3)}")
print(f"Mean Relative Error (MRE): {round(rf_mre_chinese, 2)}%")

"""# Regression Logistic

Malay Race
"""

from sklearn.linear_model import LinearRegression

# Train the Linear Regression model for Malay race
lr_model_malay = LinearRegression()
lr_model_malay.fit(X_train_malay, y_train_malay)
lr_predictions_malay = lr_model_malay.predict(X_test_malay)

# Calculate evaluation metrics for the Linear Regression model (Malay race)
lr_mse_malay = mean_squared_error(y_test_malay, lr_predictions_malay)
lr_mae_malay = mean_absolute_error(y_test_malay, lr_predictions_malay)
lr_r2_malay = r2_score(y_test_malay, lr_predictions_malay)
lr_mre_malay = np.mean(np.abs((y_test_malay - lr_predictions_malay) / y_test_malay)) * 100

print(f"Linear Regression Model - Malay Race")
print(f"Mean Squared Error (MSE): {lr_mse_malay}")
print(f"Mean Absolute Error (MAE): {lr_mae_malay}")
print(f"R-squared: {lr_r2_malay}")
print(f"Mean Relative Error (MRE): {lr_mre_malay}%")

"""Indian Race"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the Linear Regression model for Indian race
lr_model_indian = LinearRegression()
lr_model_indian.fit(X_train_indian, y_train_indian)
lr_predictions_indian = lr_model_indian.predict(X_test_indian)

# Calculate evaluation metrics for the Linear Regression model (Indian race)
lr_mse_indian = mean_squared_error(y_test_indian, lr_predictions_indian)
lr_mae_indian = mean_absolute_error(y_test_indian, lr_predictions_indian)
lr_r2_indian = r2_score(y_test_indian, lr_predictions_indian)
lr_mre_indian = np.mean(np.abs((y_test_indian - lr_predictions_indian) / y_test_indian)) * 100

print(f"Linear Regression Model - Indian Race")
print(f"Mean Squared Error (MSE): {lr_mse_indian}")
print(f"Mean Absolute Error (MAE): {lr_mae_indian}")
print(f"R-squared: {lr_r2_indian}")
print(f"Mean Relative Error (MRE): {lr_mre_indian}%")

"""Chinese Race"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the Linear Regression model for Chinese race
lr_model_chinese = LinearRegression()
lr_model_chinese.fit(X_train_chinese, y_train_chinese)
lr_predictions_chinese = lr_model_chinese.predict(X_test_chinese)

# Calculate evaluation metrics for the Linear Regression model (Chinese race)
lr_mse_chinese = mean_squared_error(y_test_chinese, lr_predictions_chinese)
lr_mae_chinese = mean_absolute_error(y_test_chinese, lr_predictions_chinese)
lr_r2_chinese = r2_score(y_test_chinese, lr_predictions_chinese)
lr_mre_chinese = np.mean(np.abs((y_test_chinese - lr_predictions_chinese) / y_test_chinese)) * 100

print(f"Linear Regression Model - Chinese Race")
print(f"Mean Squared Error (MSE): {lr_mse_chinese}")
print(f"Mean Absolute Error (MAE): {lr_mae_chinese}")
print(f"R-squared: {lr_r2_chinese}")
print(f"Mean Relative Error (MRE): {lr_mre_chinese}%")

"""# Naive Bayes

Malay Race
"""

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Discretize the target variable into bins
num_bins = 10
y_train_malay_discrete = np.digitize(y_train_malay, bins=np.linspace(y_train_malay.min(), y_train_malay.max(), num_bins))
y_test_malay_discrete = np.digitize(y_test_malay, bins=np.linspace(y_train_malay.min(), y_train_malay.max(), num_bins))

# Train the Gaussian Naive Bayes model for Malay race
nb_model_malay = GaussianNB()
nb_model_malay.fit(X_train_malay, y_train_malay_discrete)
nb_predictions_malay = nb_model_malay.predict(X_test_malay)

# Calculate evaluation metrics for Malay race
nb_mse_malay = mean_squared_error(y_test_malay_discrete, nb_predictions_malay)
nb_mae_malay = mean_absolute_error(y_test_malay_discrete, nb_predictions_malay)
nb_r2_malay = r2_score(y_test_malay_discrete, nb_predictions_malay)

# Calculate Mean Relative Error (MRE)
nb_mre_malay = np.mean(np.abs((y_test_malay_discrete - nb_predictions_malay) / y_test_malay_discrete)) * 100

print(f"Gaussian Naive Bayes - Malay Race")
print(f"Mean Squared Error (MSE): {nb_mse_malay}")
print(f"Mean Absolute Error (MAE): {nb_mae_malay}")
print(f"R-squared: {nb_r2_malay}")
print(f"Mean Relative Error (MRE): {nb_mre_malay}%")

"""Indian Race"""

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Discretize the target variable into bins for Indian race
num_bins_indian = 10
y_train_indian_discrete = np.digitize(y_train_indian, bins=np.linspace(y_train_indian.min(), y_train_indian.max(), num_bins_indian))
y_test_indian_discrete = np.digitize(y_test_indian, bins=np.linspace(y_train_indian.min(), y_train_indian.max(), num_bins_indian))

# Train the Gaussian Naive Bayes model for Indian race
nb_model_indian = GaussianNB()
nb_model_indian.fit(X_train_indian, y_train_indian_discrete)
nb_predictions_indian = nb_model_indian.predict(X_test_indian)

# Calculate evaluation metrics for Indian race
nb_mse_indian = mean_squared_error(y_test_indian_discrete, nb_predictions_indian)
nb_mae_indian = mean_absolute_error(y_test_indian_discrete, nb_predictions_indian)
nb_r2_indian = r2_score(y_test_indian_discrete, nb_predictions_indian)

# Calculate Mean Relative Error (MRE) for Indian race with a check for division by zero
non_zero_indices = y_test_indian_discrete != 0
nb_mre_indian = np.mean(np.abs((y_test_indian_discrete[non_zero_indices] - nb_predictions_indian[non_zero_indices]) / y_test_indian_discrete[non_zero_indices])) * 100

print(f"Gaussian Naive Bayes - Indian Race")
print(f"Mean Squared Error (MSE): {nb_mse_indian}")
print(f"Mean Absolute Error (MAE): {nb_mae_indian}")
print(f"R-squared: {nb_r2_indian}")
print(f"Mean Relative Error (MRE): {nb_mre_indian}%")

"""Chinese Race"""

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Discretize the target variable into bins for Chinese race
num_bins_chinese = 10
y_train_chinese_discrete = np.digitize(y_train_chinese, bins=np.linspace(y_train_chinese.min(), y_train_chinese.max(), num_bins_chinese))
y_test_chinese_discrete = np.digitize(y_test_chinese, bins=np.linspace(y_train_chinese.min(), y_train_chinese.max(), num_bins_chinese))

# Train the Gaussian Naive Bayes model for Chinese race
nb_model_chinese = GaussianNB()
nb_model_chinese.fit(X_train_chinese, y_train_chinese_discrete)
nb_predictions_chinese = nb_model_chinese.predict(X_test_chinese)

# Calculate evaluation metrics for Chinese race
nb_mse_chinese = mean_squared_error(y_test_chinese_discrete, nb_predictions_chinese)
nb_mae_chinese = mean_absolute_error(y_test_chinese_discrete, nb_predictions_chinese)
nb_r2_chinese = r2_score(y_test_chinese_discrete, nb_predictions_chinese)

# Calculate Mean Relative Error (MRE) for Chinese race with a check for division by zero
non_zero_indices_chinese = y_test_chinese_discrete != 0
nb_mre_chinese = np.mean(np.abs((y_test_chinese_discrete[non_zero_indices_chinese] - nb_predictions_chinese[non_zero_indices_chinese]) / y_test_chinese_discrete[non_zero_indices_chinese])) * 100

print(f"Gaussian Naive Bayes - Chinese Race")
print(f"Mean Squared Error (MSE): {nb_mse_chinese}")
print(f"Mean Absolute Error (MAE): {nb_mae_chinese}")
print(f"R-squared: {nb_r2_chinese}")
print(f"Mean Relative Error (MRE): {nb_mre_chinese}%")

"""# Support Vector Machine

Malay Race
"""

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the SVM model for Malay race
svm_model_malay = SVR(kernel='linear')  # You can choose different kernels like 'rbf', 'poly', etc.
svm_model_malay.fit(X_train_malay, y_train_malay)
svm_predictions_malay = svm_model_malay.predict(X_test_malay)

# Calculate evaluation metrics for the SVM model (Malay race)
svm_mse_malay = mean_squared_error(y_test_malay, svm_predictions_malay)
svm_mae_malay = mean_absolute_error(y_test_malay, svm_predictions_malay)
svm_r2_malay = r2_score(y_test_malay, svm_predictions_malay)

# Calculate Mean Relative Error (MRE) with handling division by zero
mask = y_test_malay != 0
svm_mre_malay = np.mean(np.abs((y_test_malay[mask] - svm_predictions_malay[mask]) / y_test_malay[mask])) * 100

print(f"SVM Model - Malay Race")
print(f"Mean Squared Error (MSE): {svm_mse_malay}")
print(f"Mean Absolute Error (MAE): {svm_mae_malay}")
print(f"R-squared: {svm_r2_malay}")
print(f"Mean Relative Error (MRE): {svm_mre_malay}")

"""Indian Race"""

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the SVM model for Indian race
svm_model_indian = SVR(kernel='linear')  # You can choose different kernels like 'rbf', 'poly', etc.
svm_model_indian.fit(X_train_indian, y_train_indian)
svm_predictions_indian = svm_model_indian.predict(X_test_indian)

# Calculate evaluation metrics for the SVM model (Indian race)
svm_mse_indian = mean_squared_error(y_test_indian, svm_predictions_indian)
svm_mae_indian = mean_absolute_error(y_test_indian, svm_predictions_indian)
svm_r2_indian = r2_score(y_test_indian, svm_predictions_indian)

# Calculate Mean Relative Error (MRE) with handling division by zero
mask_indian = y_test_indian != 0
svm_mre_indian = np.mean(np.abs((y_test_indian[mask_indian] - svm_predictions_indian[mask_indian]) / y_test_indian[mask_indian])) * 100

print(f"SVM Model - Indian Race")
print(f"Mean Squared Error (MSE): {svm_mse_indian}")
print(f"Mean Absolute Error (MAE): {svm_mae_indian}")
print(f"R-squared: {svm_r2_indian}")
print(f"Mean Relative Error (MRE): {svm_mre_indian}")

"""Chinese Race"""

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the SVM model for Chinese race
svm_model_chinese = SVR(kernel='linear')  # You can choose different kernels like 'rbf', 'poly', etc.
svm_model_chinese.fit(X_train_chinese, y_train_chinese)
svm_predictions_chinese = svm_model_chinese.predict(X_test_chinese)

# Calculate evaluation metrics for the SVM model (Chinese race)
svm_mse_chinese = mean_squared_error(y_test_chinese, svm_predictions_chinese)
svm_mae_chinese = mean_absolute_error(y_test_chinese, svm_predictions_chinese)
svm_r2_chinese = r2_score(y_test_chinese, svm_predictions_chinese)

# Calculate Mean Relative Error (MRE) with handling division by zero
mask_chinese = y_test_chinese != 0
svm_mre_chinese = np.mean(np.abs((y_test_chinese[mask_chinese] - svm_predictions_chinese[mask_chinese]) / y_test_chinese[mask_chinese])) * 100

print(f"SVM Model - Chinese Race")
print(f"Mean Squared Error (MSE): {svm_mse_chinese}")
print(f"Mean Absolute Error (MAE): {svm_mae_chinese}")
print(f"R-squared: {svm_r2_chinese}")
print(f"Mean Relative Error (MRE): {svm_mre_chinese}")

"""# Multilayer Perceptron

Malay Race
"""

from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the MLP model for Malay race
mlp_model_malay = MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)
mlp_model_malay.fit(X_train_malay, y_train_malay)
mlp_predictions_malay = mlp_model_malay.predict(X_test_malay)

# Calculate evaluation metrics for the MLP model (Malay race)
mlp_mse_malay = mean_squared_error(y_test_malay, mlp_predictions_malay)
mlp_mae_malay = mean_absolute_error(y_test_malay, mlp_predictions_malay)
mlp_r2_malay = r2_score(y_test_malay, mlp_predictions_malay)

# Calculate Mean Relative Error (MRE) with handling division by zero
mask = y_test_malay != 0
mlp_mre_malay = np.mean(np.abs((y_test_malay[mask] - mlp_predictions_malay[mask]) / y_test_malay[mask])) * 100

print(f"MLP Model - Malay Race")
print(f"Mean Squared Error (MSE): {mlp_mse_malay}")
print(f"Mean Absolute Error (MAE): {mlp_mae_malay}")
print(f"R-squared: {mlp_r2_malay}")
print(f"Mean Relative Error (MRE): {mlp_mre_malay}")

"""Indian Race"""

from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the MLP model for Indian race
mlp_model_indian = MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)
mlp_model_indian.fit(X_train_indian, y_train_indian)
mlp_predictions_indian = mlp_model_indian.predict(X_test_indian)

# Calculate evaluation metrics for the MLP model (Indian race)
mlp_mse_indian = mean_squared_error(y_test_indian, mlp_predictions_indian)
mlp_mae_indian = mean_absolute_error(y_test_indian, mlp_predictions_indian)
mlp_r2_indian = r2_score(y_test_indian, mlp_predictions_indian)

# Calculate Mean Relative Error (MRE) with handling division by zero
mask_indian = y_test_indian != 0
mlp_mre_indian = np.mean(np.abs((y_test_indian[mask_indian] - mlp_predictions_indian[mask_indian]) / y_test_indian[mask_indian])) * 100

print(f"MLP Model - Indian Race")
print(f"Mean Squared Error (MSE): {mlp_mse_indian}")
print(f"Mean Absolute Error (MAE): {mlp_mae_indian}")
print(f"R-squared: {mlp_r2_indian}")
print(f"Mean Relative Error (MRE): {mlp_mre_indian}")

"""Chinese Race"""

from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Train the MLP model for Chinese race
mlp_model_chinese = MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)
mlp_model_chinese.fit(X_train_chinese, y_train_chinese)
mlp_predictions_chinese = mlp_model_chinese.predict(X_test_chinese)

# Calculate evaluation metrics for the MLP model (Chinese race)
mlp_mse_chinese = mean_squared_error(y_test_chinese, mlp_predictions_chinese)
mlp_mae_chinese = mean_absolute_error(y_test_chinese, mlp_predictions_chinese)
mlp_r2_chinese = r2_score(y_test_chinese, mlp_predictions_chinese)

# Calculate Mean Relative Error (MRE) with handling division by zero
mask_chinese = y_test_chinese != 0
mlp_mre_chinese = np.mean(np.abs((y_test_chinese[mask_chinese] - mlp_predictions_chinese[mask_chinese]) / y_test_chinese[mask_chinese])) * 100

print(f"MLP Model - Chinese Race")
print(f"Mean Squared Error (MSE): {mlp_mse_chinese}")
print(f"Mean Absolute Error (MAE): {mlp_mae_chinese}")
print(f"R-squared: {mlp_r2_chinese}")
print(f"Mean Relative Error (MRE): {mlp_mre_chinese}")

"""# Ensemble Model

Malay Race
"""

# Train the ensemble model (Linear Regression) using the predictions from base models (Malay race)
ensemble_model_malay = LinearRegression()
ensemble_model_malay.fit(np.column_stack((rf_predictions_malay, lr_predictions_malay, nb_predictions_malay, svm_predictions_malay, mlp_predictions_malay)), y_test_malay)
ensemble_predictions_malay = ensemble_model_malay.predict(np.column_stack((rf_predictions_malay,  lr_predictions_malay, nb_predictions_malay, svm_predictions_malay, mlp_predictions_malay)))

# Calculate evaluation metrics for the ensemble model (Malay race)
ensemble_mse_malay = mean_squared_error(y_test_malay, ensemble_predictions_malay)
ensemble_mae_malay = mean_absolute_error(y_test_malay, ensemble_predictions_malay)
ensemble_r2_malay = r2_score(y_test_malay, ensemble_predictions_malay)
ensemble_mre_malay = np.mean(np.abs((y_test_malay - ensemble_predictions_malay) / y_test_malay)) * 100

print(f"Ensemble Model - Malay Race")
print(f"Mean Squared Error (MSE): {ensemble_mse_malay}")
print(f"Mean Absolute Error (MAE): {ensemble_mae_malay}")
print(f"R-squared: {ensemble_r2_malay}")
print(f"Mean Relative Error (MRE): {ensemble_mre_malay}%")

"""Indian Race"""

# Train the ensemble model (Linear Regression) using the predictions from base models
ensemble_model_indian = LinearRegression()
ensemble_model_indian.fit(np.column_stack((rf_predictions_indian, lr_predictions_indian, nb_predictions_indian, svm_predictions_indian, mlp_predictions_indian)), y_test_indian)
ensemble_predictions_indian = ensemble_model_indian.predict(np.column_stack((rf_predictions_indian,  lr_predictions_indian, nb_predictions_indian, svm_predictions_indian, mlp_predictions_indian)))

# Calculate evaluation metrics for the ensemble model (Indian race)
ensemble_mse_indian = mean_squared_error(y_test_indian, ensemble_predictions_indian)
ensemble_mae_indian = mean_absolute_error(y_test_indian, ensemble_predictions_indian)
ensemble_r2_indian = r2_score(y_test_indian, ensemble_predictions_indian)
ensemble_mre_indian = np.mean(np.abs((y_test_indian - ensemble_predictions_indian) / y_test_indian)) * 100

print(f"Ensemble Model - Indian Race")
print(f"Mean Squared Error (MSE): {ensemble_mse_indian}")
print(f"Mean Absolute Error (MAE): {ensemble_mae_indian}")
print(f"R-squared: {ensemble_r2_indian}")
print(f"Mean Relative Error (MRE): {ensemble_mre_indian}%")

"""Chinese Race"""

# Train the ensemble model (Linear Regression) using the predictions from base models (Chinese race)
ensemble_model_chinese = LinearRegression()
ensemble_model_chinese.fit(np.column_stack((rf_predictions_chinese, lr_predictions_chinese, nb_predictions_chinese, svm_predictions_chinese, mlp_predictions_chinese)), y_test_chinese)
ensemble_predictions_chinese = ensemble_model_chinese.predict(np.column_stack((rf_predictions_chinese,  lr_predictions_chinese, nb_predictions_chinese, svm_predictions_chinese, mlp_predictions_chinese)))

# Calculate evaluation metrics for the ensemble model (Chinese race)
ensemble_mse_chinese = mean_squared_error(y_test_chinese, ensemble_predictions_chinese)
ensemble_mae_chinese = mean_absolute_error(y_test_chinese, ensemble_predictions_chinese)
ensemble_r2_chinese = r2_score(y_test_chinese, ensemble_predictions_chinese)
ensemble_mre_chinese = np.mean(np.abs((y_test_chinese - ensemble_predictions_chinese) / y_test_chinese)) * 100

print(f"Ensemble Model - Chinese Race")
print(f"Mean Squared Error (MSE): {ensemble_mse_chinese}")
print(f"Mean Absolute Error (MAE): {ensemble_mae_chinese}")
print(f"R-squared: {ensemble_r2_chinese}")
print(f"Mean Relative Error (MRE): {ensemble_mre_chinese}%")

"""# Visualization

**Actual vs. Predicted** **Values**

Malay Race
"""

# Plot the actual and predicted values for the Malay race
plt.figure(figsize=(6, 4))
plt.scatter(y_test_malay, ensemble_predictions_malay, color='blue', label='Predicted')
plt.plot([min(y_test_malay), max(y_test_malay)], [min(y_test_malay), max(y_test_malay)], color='black', linestyle='--', label='Actual')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted Values - Malay Race')
plt.legend()
plt.grid(True)
plt.show()



# Plot the residuals for the Malay race
residuals_malay = y_test_malay - ensemble_predictions_malay
plt.figure(figsize=(6, 4))
plt.scatter(y_test_malay, residuals_malay, color='blue')
plt.axhline(y=0, color='black', linestyle='--')
plt.xlabel('Actual')
plt.ylabel('Residuals')
plt.title('Residual Plot - Malay Race')
plt.grid(True)
plt.show()

"""Indian Race"""

# Plot the actual and predicted values for the Indian race
plt.figure(figsize=(6, 4))
plt.scatter(y_test_indian, ensemble_predictions_indian, color='green', label='Predicted')
plt.plot([min(y_test_indian), max(y_test_indian)], [min(y_test_indian), max(y_test_indian)], color='black', linestyle='--', label='Actual')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted Values - Indian Race')
plt.legend()
plt.grid(True)
plt.show()

# Plot the residuals for the Indian race
residuals_indian = y_test_indian - ensemble_predictions_indian
plt.figure(figsize=(6, 4))
plt.scatter(y_test_indian, residuals_indian, color='green')
plt.axhline(y=0, color='black', linestyle='--')
plt.xlabel('Actual')
plt.ylabel('Residuals')
plt.title('Residual Plot - Indian Race')
plt.grid(True)
plt.show()

"""Chinese Race"""

# Plot the actual and predicted values for the Chinese race
plt.figure(figsize=(6, 4))
plt.scatter(y_test_chinese, ensemble_predictions_chinese, color='red', label='Predicted')
plt.plot([min(y_test_chinese), max(y_test_chinese)], [min(y_test_chinese), max(y_test_chinese)], color='black', linestyle='--', label='Actual')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted Values - Chinese Race')
plt.legend()
plt.grid(True)
plt.show()

# Plot the residuals for the Chinese race
residuals_chinese = y_test_chinese - ensemble_predictions_chinese
plt.figure(figsize=(6, 4))
plt.scatter(y_test_chinese, residuals_chinese, color='red')
plt.axhline(y=0, color='black', linestyle='--')
plt.xlabel('Actual')
plt.ylabel('Residuals')
plt.title('Residual Plot - Chinese Race')
plt.grid(True)
plt.show()

"""# Graph Comparison

MRE for Malay
"""

# Create a bar chart of MRE for all models
models = ['Random Forest','Logistic Regression', 'Naive Bayes', 'Support Vector Machine','Multilayer Perceptron', 'Ensemble']
mre_values = [rf_mre_malay, lr_mre_malay, nb_mre_malay,svm_mre_malay, mlp_mre_malay,ensemble_mre_malay]
colors = ['blue', 'green', 'orange', 'red', 'yellow', 'purple']  # Specify a color for each bar

plt.figure(figsize=(15, 4))
plt.bar(models, mre_values, color=colors)
plt.xlabel('Models')
plt.ylabel('Mean Relative Error (MRE)')
plt.title('Mean Relative Error for Malay Race')
plt.show()

import matplotlib.pyplot as plt

models = ['Random Forest', 'Logistic Regression', 'Naive Bayes', 'Support Vector Machine', 'Multilayer Perceptron', 'Ensemble']
mre_values = [rf_mre_malay, lr_mre_malay, nb_mre_malay, svm_mre_malay, mlp_mre_malay, ensemble_mre_malay]
colors = ['blue', 'green', 'orange', 'red', 'yellow', 'purple']

plt.figure(figsize=(15, 4))
bars = plt.bar(models, mre_values, color=colors)
plt.xlabel('Models')
plt.ylabel('Mean Relative Error (MRE)')
plt.title('Mean Relative Error for Malay Race')

# Find the index of the minimum MRE value
min_mre_index = mre_values.index(min(mre_values))
model_malay_name = models[min_mre_index]
model_malay = rf_model_malay

# Highlight the bar of the most accurate model and display its value
bars[min_mre_index].set_color('cyan')
for bar, value in zip(bars, mre_values):
    plt.text(bar.get_x() + bar.get_width()/2, value, f'{value:.2f}', ha='center', va='bottom')

plt.show()

print(f"The best model for Malay race is: {model_malay_name}")

"""MRE for Indian"""

# Create a bar chart of MRE for all models
models = ['Random Forest','Logistic Regression', 'Naive Bayes', 'Support Vector Machine','Multilayer Perceptron', 'Ensemble']
mre_values = [rf_mre_indian, lr_mre_indian, nb_mre_indian,svm_mre_indian, mlp_mre_indian,ensemble_mre_indian]
colors = ['blue', 'green', 'orange', 'red', 'yellow', 'purple']  # Specify a color for each bar

plt.figure(figsize=(6, 4))
plt.bar(models, mre_values, color=colors)
plt.xlabel('Models')
plt.ylabel('Mean Relative Error (MRE)')
plt.title('Mean Relative Error for Indian Race')
plt.show()

import matplotlib.pyplot as plt

models = ['Random Forest', 'Logistic Regression', 'Naive Bayes', 'Support Vector Machine', 'Multilayer Perceptron', 'Ensemble']
mre_values = [rf_mre_indian, lr_mre_indian, nb_mre_indian, svm_mre_indian, mlp_mre_indian, ensemble_mre_indian]
colors = ['blue', 'green', 'orange', 'red', 'yellow', 'purple']

plt.figure(figsize=(10, 6))
bars = plt.bar(models, mre_values, color=colors)
plt.xlabel('Models')
plt.ylabel('Mean Relative Error (MRE)')
plt.title('Mean Relative Error for Indian Race')

# Find the index of the minimum MRE value
min_mre_index = mre_values.index(min(mre_values))

# Highlight the bar of the most accurate model and display its value
bars[min_mre_index].set_color('cyan')
plt.text(min_mre_index, mre_values[min_mre_index], f'{mre_values[min_mre_index]:.2f}', ha='center', va='bottom')

plt.show()

# Declare the best model for the Indian race
model_indian_name = models[min_mre_index]
model_indian = ensemble_model_indian
print(f"The best model for the Indian race is: {model_indian_name}")

"""MRE for Chinese"""

# Create a bar chart of MRE for all models
models = ['Random Forest','Logistic Regression', 'Naive Bayes', 'Support Vector Machine','Multilayer Perceptron', 'Ensemble']
mre_values = [rf_mre_chinese, lr_mre_chinese, nb_mre_chinese,svm_mre_chinese, mlp_mre_chinese,ensemble_mre_chinese]
colors = ['blue', 'green', 'orange', 'red', 'yellow', 'purple']  # Specify a color for each bar

plt.figure(figsize=(10, 6))
plt.bar(models, mre_values, color=colors)
plt.xlabel('Models')
plt.ylabel('Mean Relative Error (MRE)')
plt.title('Mean Relative Error for Chinese Race')
plt.show()

import matplotlib.pyplot as plt

models = ['Random Forest', 'Logistic Regression', 'Naive Bayes', 'Support Vector Machine', 'Multilayer Perceptron', 'Ensemble']
mre_values = [rf_mre_chinese, lr_mre_chinese, nb_mre_chinese, svm_mre_chinese, mlp_mre_chinese, ensemble_mre_chinese]
colors = ['blue', 'green', 'orange', 'red', 'yellow', 'purple']

plt.figure(figsize=(10, 6))
bars = plt.bar(models, mre_values, color=colors)
plt.xlabel('Models')
plt.ylabel('Mean Relative Error (MRE)')
plt.title('Mean Relative Error for Chinese Race')

# Find the index of the minimum MRE value
min_mre_index = mre_values.index(min(mre_values))

# Highlight the bar of the most accurate model and display its value
bars[min_mre_index].set_color('cyan')
plt.text(min_mre_index, mre_values[min_mre_index], f'{mre_values[min_mre_index]:.2f}', ha='center', va='bottom')

plt.show()

# Declare the best model for the Chinese race
model_chinese_name = models[min_mre_index]
model_chinese = rf_model_chinese
print(f"The best model for the Chinese race is: {model_chinese_name}")

"""# Fetal Growth Curve (from raw data)"""

combined_data = pd.concat(dfs.values(), ignore_index=True)

# Filter the data for the relevant races (Indian, Chinese, Malay)
relevant_races = ['I', 'C', 'M']
combined_data = combined_data[combined_data['RACE'].isin(relevant_races)]

# Convert the 'GA' column to numeric values
combined_data['GA'] = pd.to_numeric(combined_data['GA'], errors='coerce')

# Define the gestational age range to plot
gestational_age_range = range(24, 41)  # Modify the range as needed

# Calculate the percentiles to plot
percentiles = [0.05, 0.5, 0.95]  # Modify the percentiles as needed

# Plot the growth chart for each race
for race in relevant_races:
    # Filter the data for the specific race and gestational age range
    race_data = combined_data[(combined_data['RACE'] == race) & (combined_data['GA'].isin(gestational_age_range))]

    # Calculate the percentiles of estimated fetal weight for the race
    percentile_data = race_data.groupby('GA')['EFW'].quantile(percentiles).unstack().interpolate(limit_direction='both')

    print(f"Percentile Data for {race} Race:")
    print(percentile_data)
    print()

    # Plot the growth chart
    plt.figure(figsize=(6, 4))  # Adjust the figure size as needed
    for percentile in percentiles:
        if percentile in percentile_data.columns and not percentile_data[percentile].isnull().all():
            plt.plot(percentile_data.index, percentile_data[percentile], label=f'{int(percentile*100)}th Percentile')
    plt.xlabel('Gestational Age (weeks)')
    plt.ylabel('Estimated Fetal Weight (g)')
    plt.title(f'Fetal Growth Chart - {race} Race')
    plt.legend()
    plt.grid(True)  # Add grid lines to the graph
    plt.show()

"""# T-Test Evaluation

Import Libraries
"""

from scipy.stats import ttest_rel

from scipy.stats import ttest_rel
import numpy as np

# Calculate the MAE values for different race models
mae_values_malay = [rf_mre_malay, lr_mre_malay, nb_mre_malay,svm_mre_malay, mlp_mre_malay,ensemble_mre_malay]
mae_values_indian = [rf_mre_indian, lr_mre_indian, nb_mre_indian,svm_mre_indian, mlp_mre_indian,ensemble_mre_indian]
mae_values_chinese = [rf_mre_chinese, lr_mre_chinese, nb_mre_chinese,svm_mre_chinese, mlp_mre_chinese,ensemble_mre_chinese]

# Perform t-tests for Malay vs. Indian and Malay vs. Chinese
t_statistic_malay_indian, p_value_malay_indian = ttest_rel(mae_values_malay, mae_values_indian)
t_statistic_malay_chinese, p_value_malay_chinese = ttest_rel(mae_values_malay, mae_values_chinese)

# Compare the p-values with the significance level (e.g., 0.05)
alpha = 0.05
if p_value_malay_indian < alpha:
    print("There is a significant difference in the performance of models between Malay and Indian races.")
    if np.mean(mae_values_malay) < np.mean(mae_values_indian):
        print("Malay models perform significantly better.")
    else:
        print("Indian models perform significantly better.")
    print(f"Calculated t-value (Malay vs. Indian): {t_statistic_malay_indian:.4f}")
    print(f"P-value (Malay vs. Indian): {p_value_malay_indian:.4f}")
else:
    print("There is no significant difference in the performance of models between Malay and Indian races.")
    print(f"Calculated t-value (Malay vs. Indian): {t_statistic_malay_indian:.4f}")
    print(f"P-value (Malay vs. Indian): {p_value_malay_indian:.4f}")

if p_value_malay_chinese < alpha:
    print("There is a significant difference in the performance of models between Malay and Chinese races.")
    if np.mean(mae_values_malay) < np.mean(mae_values_chinese):
        print("Malay models perform significantly better.")
    else:
        print("Chinese models perform significantly better.")
    print(f"Calculated t-value (Malay vs. Chinese): {t_statistic_malay_chinese:.4f}")
    print(f"P-value (Malay vs. Chinese): {p_value_malay_chinese:.4f}")
else:
    print("There is no significant difference in the performance of models between Malay and Chinese races.")
    print(f"Calculated t-value (Malay vs. Chinese): {t_statistic_malay_chinese:.4f}")
    print(f"P-value (Malay vs. Chinese): {p_value_malay_chinese:.4f}")

"""# Interactive Machine Learning Dashboard using IPython

Display the Dashboard
"""

import ipywidgets as widgets
from IPython.display import clear_output, display, HTML
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings

predictions = {}
# global race
race = 'N/A'

# Define the input widgets
bpd_input = widgets.FloatText(value=0, description='Biparietal Diameter (mm):', style={'description_width': 'initial'})
hc_input = widgets.FloatText(value=0, description='Head Circumference (mm):', style={'description_width': 'initial'})
ac_input = widgets.FloatText(value=0, description='Abdominal Circumference (mm):', style={'description_width': 'initial'})
fl_input = widgets.FloatText(value=0, description='Femur Diaphysis (mm):', style={'description_width': 'initial'})
ga_input = widgets.FloatText(value=0, description='Gestational Age (weeks):', style={'description_width': 'initial'})
ethnicity_input = widgets.Dropdown(options=['Malay', 'Indian', 'Chinese'], description='Ethnicity:', style={'description_width': 'initial'})
compare_input = widgets.SelectMultiple(options=['Malay', 'Indian', 'Chinese'], description='Compare:', style={'description_width': 'initial'})
graph_features_button = widgets.Button(description='Generate Feature Comparison Graph', button_style='success')

# Define the output labels
output_label = widgets.Label(value='Predicted Ethnic Baby Features:')
compare_output_labels = [widgets.Label(value='') for _ in range(len(compare_input.options))]

# Define the predict button
predict_button = widgets.Button(description='Predict', button_style='primary')

# Define the graph output widget
graph_output = widgets.Output(layout={'height': '300px', 'width': '400px'})

# Function to update the race prediction display
def update_race_prediction(race):
    #print("RACE", race)
    race_prediction_html = widgets.HTML(
        f'Ramalan Etnik Bayi adalah {race}</p>'
    )
    return race_prediction_html


# Define the function to predict ethnic baby features
def predict_ethnic_baby_features(b):
    # Retrieve the input values
    BPD = bpd_input.value
    HC = hc_input.value
    AC = ac_input.value
    FL = fl_input.value
    GA = ga_input.value
    ETHNICITY = ethnicity_input.value

    # Check for missing input
    if (
        BPD == 0
        or HC == 0
        or AC == 0
        or FL == 0
        or GA == 0
        or ETHNICITY == ""
    ):
        output_label.value = "Please fill in all the input values to get the predicted ethnic baby features."
        return

    # Check for negative input
    if (
        BPD < 0
        or HC < 0
        or AC < 0
        or FL < 0
        or GA < 0
    ):
        output_label.value = "Input values cannot be negative. Please enter positive numbers."
        return

    # Create the feature array
    feature_array = [[BPD, HC, AC, FL, GA]]

    # Select the appropriate model based on ethnicity
    if ETHNICITY == 'Malay':
        model = model_malay
    elif ETHNICITY == 'Indian':
        model = model_indian
    elif ETHNICITY == 'Chinese':
        model = model_chinese
    else:
        model = None


    # Create the feature array
    feature_array = [[BPD, HC, AC, FL, GA]]

    # Select the appropriate model based on ethnicity
    ethnicity_models = {
        'Malay': model_malay,
        'Indian': model_indian,
        'Chinese': model_chinese
    }

    for ethnicity, model in ethnicity_models.items():
        if model:
            prediction = model.predict(feature_array)[0]
            predictions[ethnicity] = prediction
        else:
            predictions[ethnicity] = None

    # Display the predictions
    for ethnicity, prediction in predictions.items():
        if prediction is not None:
          pass
            #print(f'Predicted Features for {ethnicity}: {prediction:.2f}')
        else:
            print(f'Invalid model for {ethnicity} ethnicity')

    global race
    if predictions:
      race = max(predictions, key=predictions.get)
      #print("RACE PREDICTED :", race)

    # Make the prediction
    if model:
        prediction = model.predict(feature_array)[0]
        output_label.value = f'Predicted Features: {prediction:.2f}'
        #print(f"\n- Malay: {predictions['Malay']:.2f}\n")
        #print(f"\n- Indian: {predictions['Indian']:.2f}\n")
        #print(f"\n- Chinese: {predictions['Chinese']:.2f}")
        #compare_output_labels[0].value = f"Malay: {predictions['Malay']:.2f}"
    else:
        output_label.value = 'Invalid ethnicity input'


    # Compare predictions across ethnicities
    selected_ethnicities = compare_input.value
    for i, ethnicity in enumerate(compare_input.options):
        if 1:
            if ethnicity == 'Malay':
                model = model_malay
            elif ethnicity == 'Indian':
                model = model_indian
            elif ethnicity == 'Chinese':
                model = model_chinese
            else:
                model = None

            if model:
                prediction = model.predict(feature_array)[0]
                compare_output_labels[i].value = f'{ethnicity}: {prediction:.2f}'
            else:
                compare_output_labels[i].value = f'{ethnicity}: Invalid ethnicity input'
        else:
            compare_output_labels[i].value = ''

# Define the function to generate the feature comparison graph
def generate_feature_comparison_graph(b):


    ethnicity = ethnicity_input.value

    with graph_output:
    # Clear previous graph
      clear_output(wait=True)

      ethnicity_models = {
          'Malay': model_malay,
          'Indian': model_indian,
          'Chinese': model_chinese
      }

      plt.figure(figsize=(15, 10))
      for idx, (ethnicity, model) in enumerate(ethnicity_models.items(), start=1):
          if model:
            if hasattr(model, 'coef_'):
              # For linear models, use the coefficients as feature importance
              feature_importance = model.coef_
              #feature_names = ['BPD', 'HC', 'AC', 'FL', 'GA']
              #data = pd.DataFrame
            elif hasattr(model, 'feature_importances_'):
              feature_importance = model.feature_importances_
            feature_names = ['BPD', 'HC', 'AC', 'FL', 'GA']
            data = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})
            plt.subplot(2, 2, idx)
            sns.barplot(data=data, x='Importance', y='Feature', orient='h')
            plt.title(f'Most Significant Features for {ethnicity}')

      plt.tight_layout()
      plt.show()

    global race

    dashboard_layout = widgets.VBox([
        widgets.HTML('<h1 style="text-align: center; background-color: #F9EBEA; padding: 10px; color: #060270;">Ethnic Baby Feature Prediction</h1>'),
        space,
        input_row1,
        space,
        input_row2,
        space,
        widgets.HBox([compare_input, space, space, space, predict_button]),
        space,
        output_label,
        widgets.VBox(compare_output_labels),
        space,
        widgets.HTML('<h1 style="text-align: center; background-color: #F9EBEA; padding: 10px; color: #060270;">Feature Comparison</h1>'),
        space,
        widgets.HBox([ethnicity_input, space, space, graph_features_button]),
        space,
        widgets.HBox([space, space, graph_output]),
        widgets.HTML('<h1 style="text-align: center; background-color: #F9EBEA; padding: 10px; color: #060270;">Ethnic Baby Prediction</h1>'),
        space,
        widgets.HTML('Ramalan Etnik Bayi adalah ' + f'{race}')

    ])

    race_prediction_display = update_race_prediction(race)

    # In your dashboard layout, replace the widgets.HTML with the updated race_prediction_display
    dashboard_layout.children = list(dashboard_layout.children[:-1]) + [race_prediction_display]


    display(dashboard_layout)

# Assign the event handlers to the buttons
predict_button.on_click(predict_ethnic_baby_features)
graph_features_button.on_click(generate_feature_comparison_graph)

# Create input widgets layout
input_layout = widgets.Layout(width='1000px', margin='5px')

# Align the input widgets horizontally
input_row1 = widgets.HBox([bpd_input, hc_input, ac_input], layout=input_layout)
input_row2 = widgets.HBox([fl_input, ga_input, ethnicity_input], layout=input_layout)
space = widgets.HTML("<br>")
line = widgets.HTML("<hr style='border: 1px solid #C0392B;'>")

# Create the dashboard layout
dashboard_layout = widgets.VBox([
    widgets.HTML('<h1 style="text-align: center; background-color: #F9EBEA; padding: 10px; color: #060270;">Ethnic Baby Feature Prediction</h1>'),
    space,
    input_row1,
    space,
    input_row2,
    space,
    widgets.HBox([compare_input, space, space, space, predict_button]),
    space,
    output_label,
    widgets.VBox(compare_output_labels),
    space,
    widgets.HTML('<h1 style="text-align: center; background-color: #F9EBEA; padding: 10px; color: #060270;">Feature Comparison</h1>'),
    space,
    widgets.HBox([ethnicity_input, space, space, graph_features_button])

])

# Styling the buttons
predict_button.style.button_color = '#24A0ED'
graph_features_button.style.button_color = '#FFA500'

# Display the dashboard with background
display(dashboard_layout)
warnings.filterwarnings("ignore")

